import streamlit as st
import requests
import threading
import os
import signal
import sys
from flask import Flask, request, jsonify

# URL for the Flask API (Replace with your production URL)
url = "https://brief-my-press-ai.streamlit.app/Use_HTTP_POST_Request"
MEDIAS = ['bmp_media1', 'bmp_media22']


# Flask API
app = Flask(__name__)


@app.route('/Use_HTTP_POST_Request', methods=['POST'])
def Use_HTTP_POST_Request():
    print('------------------------------------------------------------------------', request.url)
    # V√©rifier le token dans les en-t√™tes
    token = request.headers.get("id")
    
    if token not in MEDIAS:  # You can validate the token here
        return jsonify({"error": "Unauthorized"}), 401
    
    # Check if the text is provided
    data = request.json
    article = data.get("text")
    
    if not article:
        return jsonify({"error": "Text is required"}), 400
    
    return jsonify({
        'extractiveSummary': 'extractiveSummary',
        'abstractiveSummary': 'abstractiveSummary',
        'extractiveAudioBuffer': 'extractiveAudioBuffer',
        'abstractiveAudioBuffer': 'abstractiveAudioBuffer'
    })










# Streamlit ###############################
st.set_page_config(
    page_title="HTTP POST Request",
    layout="wide",
    menu_items={
        'Get Help': 'https://www.extremelycoolapp.com/help',
        'Report a bug': "https://www.extremelycoolapp.com/bug",
        'About': "# This is a header. This is an *extremely* cool app!"
    }
)



# Logo
st.sidebar.image("Code/WEBAPI/ressources/logo black.png", width=350) 

st.sidebar.title("üìö Acc√®s rapide")
st.sidebar.write("Explorez nos fonctionnalit√©s via les onglets ci-dessous.")

page_dico = {
    "üåê Tester l'API REST": "pages/Use_HTTP_POST_Request.py",
    "üêç Tester la biblioth√®que Python": "pages/Use_Python_API.py",
    "üìä Analytics": "pages/Analytics.py",
    "üíµ Nos tarifs": "pages/Pricing.py",
}

for a in page_dico.keys():
    if st.sidebar.button(a):
        st.switch_page(page_dico[a])




# Title
st.markdown("<h1 style='text-align: center; color: #4CAF50;'>BMP Media AI</h1>", unsafe_allow_html=True)
st.markdown("<h2 style='text-align: center; color: #555;'>Documentation pour l'int√©gration Python</h2>", unsafe_allow_html=True)
st.markdown("---")



# API REST
st.header("üåê Utilisation de l'API REST")


st.markdown(""" 
            
Cette page vous guide sur la mani√®re d'utiliser notre API pour transformer vos articles en r√©sum√©s et 
fichiers audio en utilisant des requ√™tes HTTP POST. 
            
-----""")

            
#####################

# Start Flask API in a separate thread
def run_flask_app():
    app.run(debug=True, use_reloader=False, host="0.0.0.0", port=8000)


# Run Flask API in the background
#flask_thread = threading.Thread(target=run_flask_app)
#flask_thread.daemon = True  # Allow the thread to exit when the main program exits
#flask_thread.start()


st.markdown(""" 
### Lancez/Stoppez le serveur

""")

if st.button("Lancer le serveur"):
    flask_thread = threading.Thread(target=run_flask_app)
    flask_thread.daemon = True
    flask_thread.start()
    st.success("Le serveur Flask est lanc√© √† http://127.0.0.1:8000/")

###############################



st.markdown(""" 
----
### Fonctionnement de l'API REST
            
Envoyez une requ√™te HTTP POST avec un article √† r√©sumer. L'API vous renverra :
- 1 R√©sum√© extractif: Points cl√©s extraits directement du texte original.
- 1 R√©sum√© abstractif: Version reformul√©e et synth√©tique du contenu.
- 2 Fichiers audio: R√©sum√©s convertis au format MP3.   

----
""")
            


st.markdown(""" 

#### URL de l'API

Pour utiliser notre API, envoyez une requ√™te POST √† :
            
`http://127.0.0.1:8000/Use_HTTP_POST_Request`
            
----
""")



st.markdown(""" 
#### üîë Authentification

Ajoutez un token (id) dans l'en-t√™te de la requ√™te :
            
----
""")


# Deux colonnes
left, right = st.columns(2)

with left:
    
    # exemple requete
    st.markdown(""" #### üîß Exemple de requ√™te""")

    st.code("""

    import requests
    import json


    def get_response_from_rest_api(text, id, url):
        # Contenu de l'article √† r√©sumer
        data = {"text": text}
            
        # Token d'authentification dans les headers
        headers = {"id": "bmp_media1"}

        # Faire la requ√™te POST
        response = requests.post(url=url, json=data, headers=headers)
        print(response)

        # V√©rifier si la requ√™te a r√©ussi
        if response.status_code == 200:
            result = response.json()
            return result
        else:
            print("Erreur:", response.json())
            return None

    """)


    st.code("""

    text = \"""
            Accoud√© √† un bureau marqu√© du sceau pr√©sidentiel au c≈ìur d‚Äôune salle bouillonnante remplie de supporteurs galvanis√©s, 
            puis dans le bureau Ovale, Donald Trump a savamment mis en sc√®ne ses premiers paraphes devant les cam√©ras du monde entier, 
            lundi 20 janvier, au premier jour de son investiture. R√©duction drastique de l‚Äôimmigration, remise en cause du droit du sol 
            et des droits des personnes transgenres, retrait de l‚ÄôOrganisation mondiale de la sant√© ou encore de l‚Äôaccord de Paris sur le
            climat‚Ä¶ Le 47e pr√©sident des Etats-Unis a sign√© une avalanche de d√©crets marquant une rupture brutale avec l‚Äôadministration Biden.
            De nombreux juristes et acteurs de la soci√©t√© civile am√©ricaine estiment toutefois que plusieurs de ses d√©cisions sortent de la 
            l√©galit√© ou seront inapplicables. Les d√©mocrates d√©noncent √©galement des mesures mena√ßant les droits des minorit√©s et l‚ÄôEtat de droit.
            Cela entra√Æne, d√®s le lendemain du retour de Donald Trump au pouvoir, la relance de la bataille judiciaire, qui avait marqu√© son premier mandat.
    \"""

    id = "bmp_media1"
    url = "http://127.0.0.1:8000/Use_HTTP_POST_Request"

    get_response_from_rest_api(text, id, url)

    """)



with right:
    st.subheader("üì¶ Structure de la r√©ponse")
    st.write("La fonction retourne un dictionnaire contenant les champs suivants :")
    st.code("""
{
    "extractiveSummary": "R√©sum√© extractif...",
    "abstractiveSummary": "R√©sum√© abstrait...",
    "extractiveAudioBuffer": "<buffer>",
    "abstractiveAudioBuffer": "<buffer>"
}
    """, language="json")
    st.write("""
    **D√©tails des champs :**
    - `extractiveSummary` : Points cl√©s extraits directement du texte original.
    - `abstractiveSummary` : Version reformul√©e et synth√©tique du contenu.
    - `extractiveAudioBuffer` : Audio (MP3) du r√©sum√© extractif.
    - `abstractiveAudioBuffer` : Audio (MP3) du r√©sum√© abstrait.

    ‚úÖ Les fichiers audio peuvent √™tre enregistr√©s ou directement utilis√©s dans des playlists.
    """)




# Footer
st.markdown("---")
st.markdown("<p style='text-align: center; font-size: 35px;'> üöÄ Commencez √† int√©grer l'API dans vos m√©dias d√®s aujourd'hui ! </p>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center; font-size: 12px;'>¬© 2025 BMP Media AI - Tous droits r√©serv√©s</p>", unsafe_allow_html=True)


